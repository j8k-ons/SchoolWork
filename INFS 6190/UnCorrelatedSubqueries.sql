-- Uncorrelated Subqueries


-- Single ROW UNCORRELATED SUBQUERY (ONE VALUE)
SELECT * 
FROM LEDGER 
WHERE CUST_CODE = (SELECT CUST_CODE FROM INVOICE WHERE INV_NUM = 1001); 


-- Multi-row Uncorrelated Subquery (Create lists of values in a column to use in outer queries)

SELECT * 
FROM INVOICE 
WHERE CUST_CODE IN (SELECT CUST_CODE FROM CUSTOMER WHERE CUST_STATE = 'TN' AND CUST_BALANCE > 100);

-- HAVING SUBQUERIES 

SELECT VEND_STATE
	, AVG(PROD_PRICE) AS AVGPRICE
FROM PRODUCT P JOIN VENDOR V ON P.VEND_ID = V.VEND_NUM
GROUP BY VEND_STATE
HAVING AVG(PROD_PRICE) > (SELECT AVG(PROD_PRICE) FROM PRODUCT P JOIN VENDOR V ON P.VEND_ID = V.VEND_NUM WHERE VEND_STATE = 'FL')
ORDER BY VEND_STATE; 

-- SELECT SUBQUERIES

SELECT PROD_NUM
	, PROD_NAME
	, PROD_PRICE
	, (SELECT AVG(PROD_PRICE) FROM PRODUCT) AS AVGPRICE, PROD_PRICE - (SELECT ROUND(AVG(PROD_PRICE), 2) FROM PRODUCT) AS DIFF
FROM PRODUCT
ORDER BY PROD_NUM; 

--  ALL Operators

SELECT * 
FROM LEDGER 
WHERE LEDGER_TRANSTYPE = 'P'
	AND LEDGER_AMT > ALL(SELECT LEDGER_AMT FROM LEDGER WHERE LEDGER_PAYTYPE = 'CHECK')
ORDER BY LEDGER_NUM; 

SELECT * 
FROM LEDGER 
WHERE LEDGER_TRANSTYPE = 'P'
	AND LEDGER_AMT > (SELECT MAX(LEDGER_AMT) FROM LEDGER WHERE LEDGER_PAYTYPE = 'CHECK')
ORDER BY LEDGER_NUM; 

-- ANY


SELECT * 
FROM LEDGER 
WHERE LEDGER_TRANSTYPE = 'P'
	AND LEDGER_AMT > ANY(SELECT LEDGER_AMT FROM LEDGER WHERE LEDGER_PAYTYPE = 'CHECK')
ORDER BY LEDGER_NUM; 

SELECT * 
FROM LEDGER 
WHERE LEDGER_TRANSTYPE = 'P'
	AND LEDGER_AMT > (SELECT MIN(LEDGER_AMT) FROM LEDGER WHERE LEDGER_PAYTYPE = 'CHECK')
ORDER BY LEDGER_NUM; 


-- MULTI-COLUMN UNCORRELATED SUBQUERY a.k.a. INLINE VIEW

SELECT LEDGER_NUM
	, LEDGER_DATE
	, LEDGER_AMT
	, AVGPAYMENT
	, NUMPAYS
	, L.CUST_CODE
FROM LEDGER L JOIN (SELECT CUST_CODE, AVG(LEDGER_AMT) AS AVGPAYMENT, COUNT(1) AS NUMPAYS
						FROM LEDGER 
						WHERE LEDGER_TRANSTYPE = 'P'
						GROUP BY CUST_CODE) AS PAYDATA ON L.CUST_CODE = PAYDATA.CUST_CODE
WHERE LEDGER_TRANSTYPE = 'P'
ORDER BY CUST_CODE, LEDGER_DATE; 


-- COMMON TABLE EXPRESSION (CTE)
-- Powerful when you need to use it more than one time within a query. 
WITH PAYDATA 
	AS (
		SELECT CUST_CODE, AVG(LEDGER_AMT) AS AVGPAYMENT, COUNT(1) AS NUMPAYS
						FROM LEDGER 
						WHERE LEDGER_TRANSTYPE = 'P'
						GROUP BY CUST_CODE)
SELECT LEDGER_NUM
	, LEDGER_DATE
	, LEDGER_AMT
	, AVGPAYMENT
	, NUMPAYS
	, L.CUST_CODE
FROM LEDGER L JOIN PAYDATA P ON L.CUST_CODE = P.CUST_CODE
WHERE LEDGER_TRANSTYPE = 'P'
ORDER BY L.CUST_CODE, LEDGER_DATE; 


-- Pull the column names out and define them in the with clause to help with readability. 
WITH PAYDATA (CUST_CODE, AVGPAYMENT, NUMPAYS)
	AS (
		SELECT CUST_CODE
			, AVG(LEDGER_AMT)
			, COUNT(1)
		FROM LEDGER 
		WHERE LEDGER_TRANSTYPE = 'P'
		GROUP BY CUST_CODE
		)


SELECT LEDGER_NUM
	, LEDGER_DATE
	, LEDGER_AMT
	, AVGPAYMENT
	, NUMPAYS
	, L.CUST_CODE
FROM LEDGER L JOIN PAYDATA P ON L.CUST_CODE = P.CUST_CODE
WHERE LEDGER_TRANSTYPE = 'P'
ORDER BY L.CUST_CODE, LEDGER_DATE; 


-- INLINE-VIEW VERSION

SELECT E.EMP_NUM
	, E.EMP_FNAME
	, E.EMP_LNAME
	, E.EMP_TITLE
	, ET.TITLE_COUNT
	, MGR.EMP_NUM
	, MGR.EMP_FNAME
	, MGR.EMP_LNAME 
	, MGR.EMP_TITLE
	, MGRT.TITLE_COUNT
FROM EMPLOYEE E JOIN (SELECT EMP_TITLE, COUNT(1) AS TITLE_COUNT
						FROM EMPLOYEE
						GROUP BY EMP_TITLE) AS ET ON E.EMP_TITLE = ET.EMP_TITLE
	JOIN EMPLOYEE MGR ON E.EMP_MANAGER = MGR.EMP_NUM
	JOIN (SELECT EMP_TITLE, COUNT(1) AS TITLE_COUNT FROM EMPLOYEE GROUP BY EMP_TITLE) AS MGRT ON MGRT.EMP_TITLE = MGR.EMP_TITLE
ORDER BY E.EMP_NUM; 

-- CTE Version (Simpler and easier to maintain

WITH ET (EMP_TITLE, TITLE_COUNT)
	AS (SELECT EMP_TITLE, COUNT(1) 
		FROM EMPLOYEE
		GROUP BY EMP_TITLE)

SELECT E.EMP_NUM
	, E.EMP_FNAME
	, E.EMP_LNAME
	, E.EMP_TITLE
	, ET.TITLE_COUNT
	, MGR.EMP_NUM
	, MGR.EMP_FNAME
	, MGR.EMP_LNAME 
	, MGR.EMP_TITLE
	, MGRT.TITLE_COUNT
FROM EMPLOYEE E JOIN ET ON E.EMP_TITLE = ET.EMP_TITLE
	JOIN EMPLOYEE MGR ON E.EMP_MANAGER = MGR.EMP_NUM
	JOIN ET AS MGRT ON MGRT.EMP_TITLE = MGR.EMP_TITLE
ORDER BY E.EMP_NUM; 