
-- SET OPERATIONS


-- UNION (Removes Duplicates) / UNION ALL (Does not remove duplicates)

SELECT CUST_CITY
	, CUST_STATE
FROM CUSTOMER 
UNION ALL 
SELECT VEND_CITY, VEND_STATE
FROM VENDOR
ORDER BY CUST_STATE, CUST_CITY;


-- INTERSECTS
SELECT CUST_CITY
	, CUST_STATE
FROM CUSTOMER 
INTERSECT 
SELECT VEND_CITY, VEND_STATE
FROM VENDOR
ORDER BY CUST_STATE, CUST_CITY;

-- EXCEPT (Give all rows in A except those that appear in B)

SELECT CUST_CITY
	, CUST_STATE
FROM CUSTOMER 
EXCEPT
SELECT VEND_CITY, VEND_STATE
FROM VENDOR
ORDER BY CUST_STATE, CUST_CITY;

-- Changing the Customer Table

SELECT * FROM CUSTOMER; 


-- DROP TABLE CUSTOMER
-- SELECT * INTO STU513DB.dbo.CUSTOMER FROM STARTERDB.TECHRESELL.CUSTOMER; 

-- SELECT * INTO STU513DB.dbo.INCOME FROM STARTERDB.TECHRESELL.INCOME; 


-- GROUPING SETS
-- Primarily aimed at Analytical work 

SELECT VEND_ID, PROD_CATEGORY, COUNT(1) AS NUMPRODS
FROM PRODUCT
GROUP BY VEND_ID, PROD_CATEGORY
ORDER BY VEND_ID, PROD_CATEGORY;


-- GROUPING SETS (Allows for more sophistication than above)


SELECT VEND_ID, PROD_CATEGORY, COUNT(1) AS NUMPRODS
FROM PRODUCT
GROUP BY 
	GROUPING SETS 
		(VEND_ID -- SINGLE 
		, PROD_CATEGORY -- SINGLE
		, (VEND_ID, PROD_CATEGORY) -- BOTH TOGETHER
		, ()) -- NEITHER
ORDER BY VEND_ID, PROD_CATEGORY; 

-- SO MANY NULLS... What to do??
SELECT C.CUST_MARITAL_STATUS, INCOME_CODE, SUM(INV_TOTAL) AS "TOTAL SALES"
FROM CUSTOMER C JOIN INVOICE I ON C.CUST_CODE = I.CUST_CODE
GROUP BY 
	GROUPING SETS (CUST_MARITAL_STATUS, INCOME_CODE, (CUST_MARITAL_STATUS, INCOME_CODE), ()); 

-- GROUPING FUNCTION
-- Returns 0 if you are grouping by something
-- Returns 1 if you are not grouping by something. 
-- This allows differentiation of NULL values from the data

SELECT IIF(GROUPING(C.CUST_MARITAL_STATUS) = 0, CUST_MARITAL_STATUS, 'ALL') AS 'MARITAL_STATUS' 
	, IIF(GROUPING(INCOME_CODE) = 0, CAST(INCOME_CODE AS VARCHAR), 'ALL') AS INCOME_CODE
	, SUM(INV_TOTAL) AS "TOTAL SALES"
FROM CUSTOMER C JOIN INVOICE I ON C.CUST_CODE = I.CUST_CODE
GROUP BY 
	GROUPING SETS (CUST_MARITAL_STATUS, INCOME_CODE, (CUST_MARITAL_STATUS, INCOME_CODE), ())
	ORDER BY MARITAL_STATUS, INCOME_CODE; 

-- Calculation in Grouping Sets for Age of Customer
SELECT IIF(GROUPING(DATEDIFF(YEAR, CUST_DOB, GETDATE())) = 0, CAST(DATEDIFF(YEAR, CUST_DOB, GETDATE()) AS VARCHAR), 'ALL') AS AGE
	, IIF(GROUPING(C.CUST_MARITAL_STATUS) = 0, CUST_MARITAL_STATUS, 'ALL') AS 'MARITAL_STATUS' 
	, IIF(GROUPING(INCOME_CODE) = 0, CAST(INCOME_CODE AS VARCHAR), 'ALL') AS INCOME_CODE
	, SUM(INV_TOTAL) AS "TOTAL SALES"
FROM CUSTOMER C JOIN INVOICE I ON C.CUST_CODE = I.CUST_CODE
GROUP BY 
	GROUPING SETS (DATEDIFF(YEAR, CUST_DOB, GETDATE()), CUST_MARITAL_STATUS, INCOME_CODE, (CUST_MARITAL_STATUS, INCOME_CODE), ())
	ORDER BY MARITAL_STATUS, INCOME_CODE
; 

-- Common Grouping Set

-- CUBE
-- VERY USEFUL FOR ANALYTICS OF BIG DATA (Pre-process the cube before sending to Tableau)
-- Measuring: AGE, MARITAL STATUS, INCOME
-- AGE, MARITAL_STATUS, INCOME, (AGE, MARITAL_STATUS), (AGE, INCOME), (MARITAL_STATUS, INCOME), (AGE, MARITAL_STATUS, INCOME), ()

SELECT IIF(GROUPING(DATEDIFF(YEAR, CUST_DOB, GETDATE())) = 0, CAST(DATEDIFF(YEAR, CUST_DOB, GETDATE()) AS VARCHAR), 'ALL') AS AGE
	, IIF(GROUPING(C.CUST_MARITAL_STATUS) = 0, CUST_MARITAL_STATUS, 'ALL') AS 'MARITAL_STATUS' 
	, IIF(GROUPING(INCOME_CODE) = 0, CAST(INCOME_CODE AS VARCHAR), 'ALL') AS INCOME_CODE
	, SUM(INV_TOTAL) AS "TOTAL SALES"
FROM CUSTOMER C JOIN INVOICE I ON C.CUST_CODE = I.CUST_CODE
GROUP BY CUBE (DATEDIFF(YEAR, CUST_DOB, GETDATE()), CUST_MARITAL_STATUS, INCOME_CODE)
ORDER BY MARITAL_STATUS, INCOME_CODE; 

-- ROLLUP: (), AGE, (AGE, MARITAL_STATUS), (AGE, MARITAL_STATUS, INCOME)

SELECT IIF(GROUPING(DATEDIFF(YEAR, CUST_DOB, GETDATE())) = 0, CAST(DATEDIFF(YEAR, CUST_DOB, GETDATE()) AS VARCHAR), 'ALL') AS AGE
	, IIF(GROUPING(C.CUST_MARITAL_STATUS) = 0, CUST_MARITAL_STATUS, 'ALL') AS 'MARITAL_STATUS' 
	, IIF(GROUPING(INCOME_CODE) = 0, CAST(INCOME_CODE AS VARCHAR), 'ALL') AS INCOME_CODE
	, SUM(INV_TOTAL) AS "TOTAL SALES"
FROM CUSTOMER C JOIN INVOICE I ON C.CUST_CODE = I.CUST_CODE
GROUP BY ROLLUP (DATEDIFF(YEAR, CUST_DOB, GETDATE()), CUST_MARITAL_STATUS, INCOME_CODE)
ORDER BY MARITAL_STATUS, INCOME_CODE; 

-- Partial Results

-- TOP N Rows (Only in SQL SERVER) 
SELECT TOP (10) CUST_CODE, CUST_LNAME, CUST_BALANCE
FROM CUSTOMER
ORDER BY CUST_BALANCE DESC; -- Use should use an order by unless you want a random set.  


-- WITH TIES TOP N Rows (Brings back all the tied values)
SELECT TOP (10) WITH TIES CUST_CODE, CUST_LNAME, CUST_BALANCE
FROM CUSTOMER
ORDER BY CUST_BALANCE; -- Use should use an order by unless you want a random set.  

-- OFFSET FETCH (ANSII Standard)
-- Feeds a limited set of data to an application's pages
-- MUST USE ORDER BY
SELECT CUST_CODE, CUST_LNAME, CUST_BALANCE
FROM CUSTOMER
ORDER BY CUST_BALANCE DESC
OFFSET 50 ROWS FETCH NEXT 10 ROWS ONLY; 