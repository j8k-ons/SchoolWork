-- Jacob Owens

-- 0

CREATE SCHEMA LOST; 

SELECT * INTO STU279DB.LOST.CLIENT FROM STARTERDB.LOST.CLIENT; 
SELECT * INTO STU279DB.LOST.GUIDE FROM STARTERDB.LOST.GUIDE; 
SELECT * INTO STU279DB.LOST.OUTING FROM STARTERDB.LOST.OUTING; 
SELECT * INTO STU279DB.LOST.QUALIFY FROM STARTERDB.LOST.QUALIFY; 
SELECT * INTO STU279DB.LOST.REGISTER FROM STARTERDB.LOST.REGISTER; 
SELECT * INTO STU279DB.LOST.TOUR FROM STARTERDB.LOST.TOUR; 


-- 1

SELECT LOST.GUIDE.G_EMPNUM AS 'Employee'
		, LOST.GUIDE.G_FNAME AS 'First Name'
		, LOST.GUIDE.G_LNAME AS 'Last Name'
FROM (SELECT LOST.OUTING.G_EMPNUM
	, Lost.OUTING.OUT_STARTLOC
	FROM LOST.OUTING
	WHERE LOST.OUTING.OUT_STARTLOC = 'Eden Street') AS EdenGuides 
RIGHT JOIN LOST.GUIDE ON LOST.GUIDE.G_EMPNUM = EdenGuides.G_EMPNUM	
WHERE EdenGuides.OUT_STARTLOC IS NULL
ORDER BY LOST.GUIDE.G_LNAME, LOST.GUIDE.G_FNAME;

-- 2

SELECT LOST.TOUR.TOUR_NAME AS 'Tour'
		, FORMAT(LOST.OUTING.OUT_DATE,'MM/dd/yyyy') AS 'Outing'
		, LOST.OUTING.OUT_MAXCAPACITY AS Seats
		, SeatsUsed.SeatsUsed As 'SeatsUsed'
		, LOST.OUTING.OUT_MAXCAPACITY - SeatsUsed.SeatsUsed AS 'EmptySeats'
		, FORMAT(SeatsUsed.AverageFee,'C') AS 'AvgRegFee'
		, FORMAT(((LOST.OUTING.OUT_MAXCAPACITY - SeatsUsed.SeatsUsed) * (SeatsUsed.AverageFee)),'C') AS 'Lost Revenue'
FROM (
	SELECT LOST.REGISTER.OUT_ID AS 'OutID'
	, COUNT(LOST.REGISTER.CLIENT_NUM) AS 'SeatsUsed'
	, AVG(LOST.REGISTER.REG_FEE) AS 'AverageFee' 
	FROM LOST.REGISTER 
	GROUP BY Lost.REGISTER.OUT_ID) AS SeatsUsed
JOIN LOST.OUTING ON LOST.OUTING.OUT_ID  = SeatsUsed.OutID
JOIN LOST.TOUR ON LOST.TOUR.TOUR_ID = LOST.OUTING.TOUR_ID
WHERE LOST.OUTING.OUT_STARTLOC != LOST.OUTING.OUT_ENDLOC
ORDER BY ((LOST.OUTING.OUT_MAXCAPACITY - SeatsUsed.SeatsUsed) * (SeatsUsed.AverageFee)) DESC, Outing; 

-- 3

SELECT LOST.TOUR.TOUR_NAME AS 'Tour'
	, CONCAT(LOST.GUIDE.G_FNAME, ' ', LOST.GUIDE.G_LNAME) AS 'Guide'
	, LOST.OUTING.Out_Date
	, LOST.OUTING.Out_MaxCapacity
	, FORMAT(LOST.TOUR.TOUR_FEE,'C') AS 'Tour_Fee'
	, FORMAT(RegHistory.AverageFee,'C') AS 'Tour_AvgFee'
	, FORMAT(Lost.Tour.Tour_Fee - RegHistory.AverageFee,'C') AS 'Difference'
FROM (
	SELECT LOST.Outing.TOUR_ID AS 'TourID'
	, AVG(LOST.REGISTER.REG_FEE) AS 'AverageFee'
	FROM LOST.REGISTER
	JOIN LOST.OUTING ON LOST.REGISTER.OUT_ID = LOST.OUTING.OUT_ID
	GROUP BY LOST.OUTING.TOUR_ID) AS RegHistory
JOIN LOST.OUTING ON LOST.OUTING.TOUR_ID = RegHistory.TourID 
JOIN LOST.TOUR ON LOST.TOUR.TOUR_ID = LOST.OUTING.TOUR_ID
JOIN LOST.GUIDE ON LOST.GUIDE.G_EMPNUM = LOST.OUTING.G_EMPNUM
WHERE LOST.OUTING.OUT_DATE BETWEEN '2023-10-10' AND '2023-10-25'
ORDER BY 'Difference' DESC, OUT_DATE, OUT_MAXCAPACITY DESC; 

-- 4

SELECT DISTINCT LOST.TOUR.Tour_ID
	, LOST.TOUR.Tour_Name
	, OutingsPerTour.Outings As 'Num Outing'
	, OutingsPerTour.Guides As 'Num Guides'
FROM (
	SELECT LOST.OUTING.TOUR_ID AS 'Tours'
	, COUNT(LOST.OUTING.OUT_ID) AS 'Outings'
	, COUNT (DISTINCT LOST.OUTING.G_EMPNUM) AS 'Guides' 
	FROM LOST.OUTING 
	WHERE LOST.OUTING.OUT_DATE < '2023-10-01' 
	GROUP BY Lost.Outing.TOUR_ID) AS OutingsPerTour
JOIN LOST.OUTING ON OutingsPerTour.Tours = LOST.OUTING.TOUR_ID
JOIN LOST.TOUR ON LOST.OUTING.TOUR_ID = LOST.TOUR.TOUR_ID
ORDER BY [Num Outing], [Num Guides], Tour.TOUR_ID DESC; 

/* I added an additional sort parameter of Tour.Tour_ID DESC, 
because Tour_ID 7 appears before Tour_ID 11 without it in the query, 
and that did not exactly match the sorting in the homework example given. */


-- 5

SELECT LOST.OUTING.OUT_ID
	, LOST.TOUR.TOUR_NAME
	, LOST.OUTING.OUT_DATE
	, CONCAT('Leaving: ', LOST.OUTING.OUT_STARTLOC, ' and Arriving: ', LOST.OUTING.OUT_ENDLOC) AS 'LOCATIONS'
FROM LOST.OUTING
JOIN LOST.TOUR ON LOST.TOUR.TOUR_ID = LOST.OUTING.TOUR_ID
WHERE (LOST.OUTING.OUT_DATE BETWEEN '2023-09-03' AND '2023-10-03') 
AND (LOST.OUTING.OUT_STARTLOC = 'West Briar' OR LOST.OUTING.OUT_ENDLOC = 'West Briar')
ORDER BY LOST.OUTING.OUT_DATE, LOST.TOUR.TOUR_NAME;