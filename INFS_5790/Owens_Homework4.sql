-- Jacob Owens

-- 1

--Removing Duplicates from LOST.TOUR
DELETE FROM LOST.TOUR
WHERE TOUR_ID IN (SELECT TOUR_ID FROM LOST.TOUR GROUP BY TOUR_ID HAVING COUNT(TOUR_ID) >1);

--Inserting the duplicated values back into LOST.TOUR
INSERT INTO LOST.TOUR VALUES 
	  (21,'East Eastside', 2.5, 35.75)
	, (15,'Grand Drinks', 4.5, 120.00)
	, (24,'Sunset Splendor', 2.0, 45.00); 

-- Make the column NOT NULL & UNIQUE so it can be a primary key. 
ALTER TABLE LOST.TOUR
ALTER COLUMN TOUR_ID DECIMAL(3,0) NOT NULL; 

ALTER TABLE LOST.TOUR
ADD CONSTRAINT tour_unique UNIQUE(TOUR_ID); 

ALTER TABLE LOST.TOUR
ADD PRIMARY KEY(TOUR_ID); 

-- 2
ALTER TABLE LOST.OUTING
ADD CONSTRAINT outing_max CHECK(OUT_MAXCAPACITY BETWEEN 1 AND 100); 

-- 3
CREATE TABLE LOST.LOCATION (
	Loc_Num DECIMAL(10,0) PRIMARY KEY, 
	Loc_Name VARCHAR(50) NOT NULL, 
	Loc_Type VARCHAR(50), 
	CONSTRAINT loc_type_ck CHECK (Loc_Type IN ('PUBLIC','PRIVATE'))
); 

-- 4
INSERT INTO LOST.LOCATION VALUES
 (1,'Grand Beach Outlook', 'PUBLIC')
,(2,'Purdy Pavilion','PRIVATE')
,(3,'Reach Point', NULL); 

-- 5
CREATE TABLE LOST.VISITS (
	Loc_Num DECIMAL(10,0), 
	Tour_ID DECIMAL(3,0),
	Visit_Duration INT, 
	PRIMARY KEY(Loc_Num,Tour_ID),
	FOREIGN KEY(Loc_Num) REFERENCES LOST.LOCATION(Loc_Num), 
	FOREIGN KEY(Tour_ID) REFERENCES LOST.TOUR(TOUR_ID)
);

-- 6
INSERT INTO LOST.VISITS VALUES 
(1,5,30),(3,5,90),(1,20,15); 

-- 7
BEGIN TRANSACTION 

-- 8
UPDATE LOST.OUTING
SET G_EMPNUM = (SELECT G_EMPNUM FROM LOST.GUIDE G WHERE G.G_FNAME = 'Tyson' AND G.G_LNAME = 'Lane')
WHERE OUT_ID = '1163'; 

-- 9
DELETE FROM LOST.GUIDE
WHERE G_FNAME = 'Patty' AND G_LNAME = 'Minter'; 

-- 10
COMMIT; 

-- 11
BEGIN TRANSACTION

-- 12
UPDATE LOST.CLIENT
SET CLIENT_PHONE = '323-2828'
WHERE CLIENT_NUM = '750'; 

-- 13
DELETE FROM LOST.REGISTER
WHERE CLIENT_NUM = '750'; 

-- 14
ROLLBACK; 

-- 15
CREATE OR ALTER PROCEDURE LOST.spRegisterClient @CLIENTNUMBER DECIMAL(10,0), @OUTINGID DECIMAL(12,0), @FEE decimal(6,2)
AS
DECLARE @MAXCAP DECIMAL(5,0)
	  , @CLIENTSREGISTERED INT
	  , @FNAME VARCHAR(15)
	  , @LNAME VARCHAR(15)
	  , @TOURNAME VARCHAR(120)
	  , @REGDATE Date
BEGIN 

	SET @CLIENTSREGISTERED = (SELECT COUNT(1) FROM LOST.REGISTER WHERE LOST.REGISTER.OUT_ID = @OUTINGID);

	SELECT @MAXCAP = OUT_MAXCAPACITY,
		   @REGDATE = OUT_DATE
	FROM LOST.OUTING
	WHERE OUT_ID = @OUTINGID; 

	IF @CLIENTSREGISTERED >= @MAXCAP
		BEGIN
			PRINT 'The outing is already full'; 
		END
	ELSE 
		BEGIN
			INSERT INTO LOST.REGISTER VALUES (@OUTINGID, @CLIENTNUMBER, @REGDATE, @FEE);
			
			SELECT @FNAME = CLIENT_FNAME, 
				   @LNAME = CLIENT_LNAME, 
				   @TOURNAME = TOUR_NAME
			FROM LOST.CLIENT 
			JOIN LOST.REGISTER ON REGISTER.CLIENT_NUM = CLIENT.CLIENT_NUM
			JOIN LOST.OUTING ON OUTING.OUT_ID = REGISTER.OUT_ID
			JOIN LOST.TOUR ON TOUR.TOUR_ID = TOUR.TOUR_ID
			WHERE OUTING.OUT_ID = @OUTINGID AND CLIENT.CLIENT_NUM = @CLIENTNUMBER;

			PRINT CONCAT(@FNAME, ' ', @LNAME, ' successfully added to the ', @TOURNAME, ' tour outing scheduled for ', FORMAT(@REGDATE, 'MM/dd/yyyy'));
		END;
END; 
